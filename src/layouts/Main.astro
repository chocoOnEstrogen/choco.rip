---
import '../styles/global.css'
import { normalizeSocial } from '../utils/string'
import config from '../config'
import keywords from '../../public/keywords.json'
import { ViewTransitions } from 'astro:transitions'
import { makePath } from '../utils/string'
import type { WebSettings } from '../classes/command'

interface Props {
	title?: string
	description?: string
	image?: string
	currentPage?: string
	type?: string
	publishedTime?: Date
	modifiedTime?: Date
	tags?: string[]
	canonicalURL?: string
	schema?: any
	noindex?: boolean
}

const {
	title = `${config.author.name} | Software Engineer`,
	description = 'Full-stack developer specializing in React, Node.js, and cloud architecture',
	image = `${config.url}/images/bg.gif`,
	type = 'website',
	publishedTime,
	modifiedTime,
	tags = [],
	canonicalURL = Astro.url.href,
	noindex = false,
	schema,
} = Astro.props

const navItems = [
	{ name: 'Home', path: '/' },
	{ name: 'Projects', path: '/projects' },
	{ name: 'Blog', path: '/blog' },
	{ name: 'About', path: '/about' },
]

// Structured data for organization
const organizationSchema = {
	"@context": "https://schema.org",
	"@type": "Organization",
	"name": config.author.name,
	"url": config.url,
	"logo": config.image,
	"sameAs": Object.values(config.author.social)
}

// Structured data for person
const personSchema = {
	"@context": "https://schema.org",
	"@type": "Person",
	"name": config.author.name,
	"url": config.url,
	"image": config.image,
	"sameAs": Object.values(config.author.social)
}


const allKeywords = [...keywords, ...tags]
const path = Astro.url.pathname

const __URL__ = `${config.url}${path}`

// Default web settings if cookie is not available during SSG
const webSettings: WebSettings = {
	background: 'nodes-and-links',
	oneko: false,
	...JSON.parse(Astro.cookies.get('web-settings')?.value || '{}')
}

console.log(webSettings)
console.log(Astro.cookies.get('web-settings')?.value)

const background = webSettings.background
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="generator" content={Astro.generator} />

		<!-- Basic SEO -->
		<title>{title} | {config.author.name}</title>
		<meta name="description" content={description} />
		<meta name="author" content={config.author.name} />
		<link rel="canonical" href={__URL__} />
		{noindex && <meta name="robots" content="noindex,nofollow" />}
		{allKeywords.length > 0 && <meta name="keywords" content={allKeywords.join(', ')} />}

		<!-- Theme Color for browsers -->
		<meta name="theme-color" content="#1a1a1a" />

		<!-- Favicon -->
		<link rel="icon" type={`image/${config.image.split('.').pop()}`} href={config.image} />
		<link rel="manifest" href="/manifest.json" />

		<!-- Open Graph / Facebook -->
		<meta property="og:type" content={type} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={image} />
		<meta property="og:url" content={__URL__} />
		<meta property="og:site_name" content={config.author.name} />
		{publishedTime && <meta property="article:published_time" content={publishedTime.toISOString()} />}
		{modifiedTime && <meta property="article:modified_time" content={modifiedTime.toISOString()} />}
		{tags.map(tag => <meta property="article:tag" content={tag} />)}

		<!-- Twitter -->
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:site" content={config.author.name} />
		<meta name="twitter:creator" content={config.author.name} />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={image} />

		<!-- Structured Data -->
		<script type="application/ld+json" set:html={JSON.stringify(organizationSchema)} />
		<script type="application/ld+json" set:html={JSON.stringify(personSchema)} />
		{schema && <script type="application/ld+json" set:html={JSON.stringify(schema)} />}


		<!-- Font Awesome -->
		<link
			rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
		/>

		<!-- KaTeX CSS -->
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css">

		<!-- Preconnect to external domains -->
		<link rel="preconnect" href="https://cdnjs.cloudflare.com" />
		<link rel="preconnect" href="https://cdn.jsdelivr.net" />


		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;500;600;700&display=swap" rel="stylesheet">

		<ViewTransitions />
	</head>
	<body class="text-everforest-fg min-h-screen p-4 md:p-8">
		{background && <script src={`/js/${background}.js`} is:inline></script>}
		<main class="terminal-window max-w-4xl mx-auto h-full">
			<div class="terminal-header">
				<div class="terminal-button close" id="close-button"></div>
				<div class="terminal-button minimize" id="minimize-button"></div>
				<div class="terminal-button maximize" id="maximize-button"></div>
				<div class="ml-4 text-sm text-everforest-gray">{config.author.name.toLowerCase()}@archlinux - {title}</div>
			</div>
			
			<div class="terminal-content overflow-y-auto max-h-[calc(100vh-8rem)]">
				<div class="terminal-content-area">
					<slot />
				</div>
			</div>

			<button id="restore-button" class="fixed bottom-4 right-4 bg-everforest-bg-light text-everforest-fg px-4 py-2 rounded shadow-lg" style="display: none;">Restore Window</button>
		</main>

		{webSettings.oneko && <script src="/js/oneko.js" is:inline></script>}
		<script src="/js/markdown.js" is:inline></script>
		<script src="/js/pulse-id.js" is:inline></script>
		<script>
			const closeButton = document.getElementById('close-button');
			const minimizeButton = document.getElementById('minimize-button');
			const maximizeButton = document.getElementById('maximize-button');
			const terminalWindow = document.querySelector('.terminal-window') as HTMLElement;

			closeButton.addEventListener('click', () => {
				const wantsToClose = confirm('Are you sure you want to close this window?');
				if (wantsToClose) {
					window.close();
				}
			});

			minimizeButton.addEventListener('click', () => {
				alert("Cannot minimize window");
				return;
			});

			maximizeButton.addEventListener('click', () => {
				if (!document.fullscreenElement) {
					terminalWindow.requestFullscreen().catch(err => {
						console.log(`Error attempting to enable fullscreen: ${err.message}`);
					});
				} else {
					document.exitFullscreen();
				}
			});
		</script>
	</body>
</html>
