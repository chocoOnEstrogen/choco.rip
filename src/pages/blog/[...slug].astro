---
import { getCollection } from 'astro:content';
import Main from '../../layouts/Main.astro';
import Terminal from '../../components/Terminal.astro';
import { calculateReadingTime } from '../../utils/blog';

export async function getStaticPaths() {
    const posts = await getCollection('blog', ({ data }) => {
        return import.meta.env.PROD ? !data.draft : true;
    });

    return posts.map(post => ({
        params: { 
            // Create URL pattern: YYYY/MM/DD/slug
            slug: `${post.data.pubDate.getFullYear()}/${
                post.data.pubDate.getMonth() + 1
            }/${
                post.data.pubDate.getDate()
            }/${post.slug}` 
        },
        props: { post },
    }));
}

const { post } = Astro.props;
const { Content } = await post.render();
const readingTime = calculateReadingTime(post.body);
const formattedDate = new Date(post.data.pubDate).toISOString();
---

<Main title={post.data.title} currentPage="/blog">
    <Terminal>
        <article class="space-y-6">
            <header class="space-y-4">
                <h1 class="text-2xl font-bold text-everforest-green">
                    {post.data.title}
                </h1>
                
                <div class="flex items-center gap-4 text-sm text-everforest-gray">
                    <time datetime={formattedDate}>
                        {new Date(post.data.pubDate).toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                        })}
                    </time>
                    <span>·</span>
                    <span>{readingTime} min read</span>
                </div>

                {post.data.tags && (
                    <div class="flex flex-wrap gap-2" style="margin-top: 1rem;">
                        {post.data.tags.map((tag: string) => (
                            <span class="px-2 py-1 text-xs rounded-full bg-everforest-bg-light text-everforest-aqua">
                                {tag}
                            </span>
                        ))}
                    </div>
                )}

                {post.data.excerpt && (
                    <p class="text-everforest-fg/80 text-lg italic" style="margin-top: 1rem;">
                        {post.data.excerpt}
                    </p>
                )}
            </header>

            <hr class="border-everforest-gray/20" />

            <div class="markdown" style="margin-top: 1rem;">
                <Content />
            </div>

            <footer class="mt-8 pt-4 border-t border-everforest-gray/20">
                <div class="flex justify-between items-center">
                    <a href="/blog" class="text-everforest-blue hover:text-everforest-aqua transition-colors">
                        ← Back to Blog
                    </a>
                    {post.data.categories && (
                        <div class="flex items-center gap-2">
                            <span class="text-everforest-gray">Filed under:</span>
                            {post.data.categories.map((category: string) => (
                                <span class="text-everforest-purple">{category}</span>
                            ))}
                        </div>
                    )}
                </div>
            </footer>
        </article>
    </Terminal>
</Main>
