---
import Main from '../layouts/Main.astro'
import config from '../config'
---

<Main currentPage="/" title="Home">
    <div class="space-y-6">
        <div class="terminal-history" id="terminal-history">
            <!-- Command history will be populated here -->
        </div>
        <div class="command-line flex">
            <span class="command-prompt">{config.author.name.toLowerCase()}@archlinux:~$&nbsp;</span>
            <span class="command-input flex-1">
                <input 
                    type="text" 
                    id="terminal-input"
                    class="command-input-text bg-transparent w-full focus:outline-none" 
                    autocomplete="off"
                    spellcheck="false"
                />
            </span>
        </div>
    </div>
</Main>


<script>
    import config from '../config';
    import { loadCommands } from '../utils/commandLoader';

    class Terminal {
        history: HTMLElement;
        input: HTMLInputElement;
        commandHistory: string[] = [];
        historyIndex: number = -1;
        currentInputBeforeHistory: string = '';
        commandManager = loadCommands();

        constructor() {
            this.history = document.getElementById('terminal-history')!;
            this.input = document.getElementById('terminal-input') as HTMLInputElement;
            this.setupEventListeners();
            this.showWelcomeMessage();
        }

        showWelcomeMessage() {
            const welcome = document.createElement('div');
            welcome.className = 'mb-4';
            welcome.innerHTML = `
                <div class="text-everforest-green mb-2" data-ani="typing" data-delay="200">
                    Welcome to ${config.author.name}'s Terminal
                </div>
                <div class="text-everforest-fg" data-ani="fade-up" data-delay="1000">
                    Type 'help' to see available commands
                </div>
            `;
            this.history.appendChild(welcome);
        }

        setupEventListeners() {
            this.input.addEventListener('keydown', (e) => {
                // Handle special key combinations
                if (e.ctrlKey) {
                    switch (e.key.toLowerCase()) {
                        case 'l': // Ctrl+L: Clear terminal
                            e.preventDefault();
                            this.executeCommand('clear', [], this.input.value);
                            return;
                        case 'c': // Ctrl+C: Cancel current input
                            e.preventDefault();
                            this.addToHistory(this.input.value, '^C');
                            this.input.value = '';
                            return;
                        case 'u': // Ctrl+U: Clear current line
                            e.preventDefault();
                            this.input.value = '';
                            return;
                    }
                }

                // Handle arrow keys for history navigation
                switch (e.key) {
                    case 'ArrowUp':
                        e.preventDefault();
                        this.navigateHistory('up');
                        return;
                    case 'ArrowDown':
                        e.preventDefault();
                        this.navigateHistory('down');
                        return;
                    case 'Enter':
                        (async () => {
                            const fullCommand = this.input.value.trim();
                            if (fullCommand) {
                                this.commandHistory.push(fullCommand);
                                this.historyIndex = this.commandHistory.length;
                                const [command, ...args] = fullCommand.split(' ');
                                await this.executeCommand(command, args, fullCommand);
                            }
                            this.input.value = '';
                        })();
                        return;
                }
            });

            // Auto-focus input when clicking anywhere in terminal
            document.querySelector('.terminal-content')?.addEventListener('click', () => {
                this.input.focus();
            });
        }

        navigateHistory(direction: 'up' | 'down') {
            if (this.commandHistory.length === 0) return;

            if (this.historyIndex === -1) {
                this.currentInputBeforeHistory = this.input.value;
            }

            if (direction === 'up') {
                if (this.historyIndex > 0) {
                    this.historyIndex--;
                    this.input.value = this.commandHistory[this.historyIndex];
                }
            } else {
                if (this.historyIndex < this.commandHistory.length - 1) {
                    this.historyIndex++;
                    this.input.value = this.commandHistory[this.historyIndex];
                } else {
                    this.historyIndex = this.commandHistory.length;
                    this.input.value = this.currentInputBeforeHistory;
                }
            }

            // Move cursor to end of input
            setTimeout(() => {
                this.input.selectionStart = this.input.selectionEnd = this.input.value.length;
            }, 0);
        }

        addToHistory(fullCommand: string, output: string) {
            const entry = document.createElement('div');
            entry.className = 'mb-2';
            
            // Command input with typing animation
            const commandDiv = document.createElement('div');
            commandDiv.className = 'flex';
            commandDiv.innerHTML = `
                <span class="command-prompt">${config.author.name.toLowerCase()}@archlinux:~$&nbsp;</span>
                <span data-ani="typing">${fullCommand}</span>
            `;
            entry.appendChild(commandDiv);

            // Command output with fade-up animation
            if (output) {
                const outputDiv = document.createElement('div');
                outputDiv.className = 'command-output whitespace-pre-line';
                outputDiv.setAttribute('data-ani', 'fade-up');
                outputDiv.setAttribute('data-delay', '300');
                outputDiv.innerHTML = output;
                entry.appendChild(outputDiv);
            }

            this.history.appendChild(entry);
            this.scrollToBottom();
        }

        async executeCommand(command: string, args: string[], input: string) {
            if (!command) return;

            const output = await this.commandManager.executeCommand(command, args);
            
            if (command === 'clear') {
                const oldHistory = this.history;
                oldHistory.style.animation = 'fadeOut 0.3s forwards';
                setTimeout(() => {
                    this.history.innerHTML = '';
                    oldHistory.style.animation = '';
                }, 300);
                return;
            }

            this.addToHistory(input, output);
            
            // Wait for animations to complete before scrolling
            setTimeout(() => {
                this.scrollToBottom();
            }, 500); // Adjust timing based on your animation durations
        }

        scrollToBottom() {
            const terminalContent = document.querySelector('.terminal-content');
            if (terminalContent) {
                terminalContent.scrollTop = terminalContent.scrollHeight;
            }
        }
    }

    // Initialize terminal when the page loads
    new Terminal();
</script>