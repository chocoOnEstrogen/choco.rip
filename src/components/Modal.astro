---
interface Props {
    id: string;
    title?: string;
    maxWidth?: string;
}

const { 
    id, 
    title, 
    maxWidth = "max-w-2xl" // default max width
} = Astro.props;
---

<div
    id={id}
    class="fixed inset-0 z-50 bg-black/50 backdrop-blur-sm hidden opacity-0 transition-opacity duration-200"
    role="dialog"
    aria-modal="true"
    aria-labelledby={`${id}-title`}
>
    <div 
        class={`absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 ${maxWidth} w-full max-h-[90vh] overflow-y-auto bg-zinc-900 rounded-lg shadow-xl transform scale-95 opacity-0 transition-all duration-200`}
        data-modal-content
    >
        <div class="p-6">
            {title && (
                <h2 id={`${id}-title`} class="text-2xl font-bold mb-4">
                    {title}
                </h2>
            )}
            <slot />
        </div>
        <button
            class="absolute top-4 right-4 p-2 text-zinc-400 hover:text-white rounded-full hover:bg-white/10 transition-colors"
            aria-label="Close modal"
            data-close-modal
        >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>
    </div>
</div>

<script>
    class ModalManager {
        private static instance: ModalManager;
        private activeModal: HTMLElement | null = null;
        private focusedElementBeforeOpen: HTMLElement | null = null;

        private constructor() {
            this.setupEventListeners();
        }

        public static getInstance(): ModalManager {
            if (!ModalManager.instance) {
                ModalManager.instance = new ModalManager();
            }
            return ModalManager.instance;
        }

        private setupEventListeners() {
            // Global click handler for opening modals
            document.addEventListener('click', (e) => {
                const trigger = (e.target as HTMLElement).closest('[data-modal-trigger]');
                if (trigger) {
                    const modalId = trigger.getAttribute('data-modal-trigger');
                    if (modalId) this.openModal(modalId);
                }

                // Handle close button clicks
                const closeButton = (e.target as HTMLElement).closest('[data-close-modal]');
                if (closeButton) {
                    this.closeActiveModal();
                }

                // Handle backdrop clicks
                const backdrop = (e.target as HTMLElement);
                if (backdrop.hasAttribute('role') && backdrop.getAttribute('role') === 'dialog') {
                    this.closeActiveModal();
                }

                // Prevent closing when clicking modal content
                if ((e.target as HTMLElement).closest('[data-modal-content]')) {
                    e.stopPropagation();
                }
            });

            // Close on escape key
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && this.activeModal) {
                    this.closeActiveModal();
                }
            });
        }

        public openModal(modalId: string) {
            const modal = document.getElementById(modalId);
            if (!modal) return;

            // Store currently focused element
            this.focusedElementBeforeOpen = document.activeElement as HTMLElement;
            
            // Close any active modal first
            if (this.activeModal) {
                this.closeActiveModal();
            }

            this.activeModal = modal;
            modal.classList.remove('hidden');
            
            // Trigger animations
            requestAnimationFrame(() => {
                modal.classList.add('opacity-100');
                const content = modal.querySelector('[data-modal-content]');
                if (content) {
                    content.classList.remove('scale-95', 'opacity-0');
                }
            });

            // Prevent body scroll
            document.body.style.overflow = 'hidden';

            // Focus the first focusable element in the modal
            const focusableElements = modal.querySelectorAll(
                'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
            );
            if (focusableElements.length) {
                (focusableElements[0] as HTMLElement).focus();
            }
        }

        public closeActiveModal() {
            if (!this.activeModal) return;

            const content = this.activeModal.querySelector('[data-modal-content]');
            if (content) {
                content.classList.add('scale-95', 'opacity-0');
            }
            this.activeModal.classList.remove('opacity-100');

            // Wait for animations to complete
            setTimeout(() => {
                this.activeModal?.classList.add('hidden');
                document.body.style.overflow = '';
                
                // Restore focus
                if (this.focusedElementBeforeOpen) {
                    this.focusedElementBeforeOpen.focus();
                }
                
                this.activeModal = null;
                this.focusedElementBeforeOpen = null;
            }, 200);
        }
    }

    // Initialize the modal manager
    ModalManager.getInstance();
</script> 